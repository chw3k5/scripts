## To call from the command line:# python update_email.py days_untTM  email_recipients## where days_untTM is the number of days until transit midpoint (typically 7)# and email_recipients is a list of email addresses in quotes ("). For# example for a daily email:# % python update_email.py 7. "natalie.hinkel @gmail.com", "skane@ sfsu.edu"## for a weekly email:# % python update_email.py 14. "natalie.hinkel @gmail.com", "skane@ sfsu.edu"## Or within ipython:# >>> import sys# >>> sys.argv = ["update_email.py", "7.", "natalie.hinkel @gmail.com", "skane@ sfsu.edu"]# >>> execfile('update_email.py')## In this way, only one script needs to be used for multiple updates.## 21/11/13 NRH#### The final stage of the TERMS update.  Once a list of# target epherides is created by Stephen's code, that is# read in here in order to pick out those planets that will# be at/near their transit midpoint within the next 7 days.# An email is then sent out at 3am (with only an html# versions) to a number of observers so that they can# potentially observe these planets at the most opportune# time.## 16/11/12  NRH##import smtplibimport stringimport numpyimport atpy#from pylab import *import matplotlib.dates as datesfrom math import *import urllibimport sysimport subprocessfrom datetime import datetime, timedeltafrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMETextdaymt_untTM = float(sys.argv[1])shortper_exclude = 10.#--------------------------------------------------------------------# Pull the target ephemerides file and exoplanets.org##urllib.urlretrieve('http://physics.sfsu.edu/~skane/targets_delim.txt','targets_delim.txt')urllib.urlretrieve('http://www.exoplanets.org/csv-files/exoplanets.csv','exo.csv')org = atpy.Table("exo.csv", type="ascii", delimiter=",")targets = atpy.Table("targets_delim.txt", type="ascii", delimiter="|")good = atpy.Table("good_targets_Sep20.csv", type="ascii", delimiter=",")  #REMEMBER TO KEEP UPDATED!!!# Functions (found online) to convert back and forth between JD and Gregorian datesdef gd2jd(datestr):    """ Convert a string Gregorian date into a Julian date using Pylab.        If no time is given (i.e., only a date), then noon is assumed.        Timezones can be given, but UTC is assumed otherwise.        :EXAMPLES:        print gd2jd('Aug 11 2007')   #---------------> 2454324.5        print gd2jd('Aug 11 2007, 12:00 PST')  #-----> 2454324.29167        print gd2jd('12:00 PM, January 1, 2000')  #--> 2451545.0        :SEE ALSO: :func:`jd2gd`        """        if datestr.__class__==str:        d = dates.datestr2num(datestr)        jd = dates.num2julian(d)        if jd<0:            jd = dates.num2julian(d + 3442850)            print "You are probably using an old version of Matplotlib..."    else:        jd = []    return jddef jd2gd(juldat):    """ Convert a numerial Julian date into a Gregorian date using Pylab.        Timezone returned will be UTC.                :EXAMPLES:        ::                print jd2gd(2454324.5)  #--> 2007-08-12 00:00:00        print jd2gd(2451545)    #--> 2000-01-01 12:00:00        :SEE ALSO: :func:`gd2jd`"""    d = dates.julian2num(juldat)    gd = dates.num2date(d )        return gd# In order to ensure that sunrise occurs before sunset, we push the time from# being "now," or 3am, to 1pm PST.  Then we pick out those targets with periods# greater than 10 days and whose TMID is within 7 days.now = (datetime.now()+timedelta(hours=10)).ctime()  #to ensure afternoon for rise/setjnow = gd2jd(now)nearplanets_inds = [ii for ii,v in enumerate(targets.TMID) if (v > jnow and v < (jnow+days_untTM) and targets.PERIOD[ii] > shortper_exclude)]if len(nearplanets_inds)==0: exit()neartargs = targets[nearplanets_inds]  #note: recarray#--------------------------------------------------------------------# Here we create the bodies of the email - only for html-based email# clients.#msg = MIMEMultipart('alternative')msg['Subject'] = "TERMS upcoming targets: JD="+str(jnow)[:10]bodyhtml = """\    <html>    <head></head>    <body>    <p>Good morning!<br><br>    Below shows the predicted transits over the next """+str(sys.argv[1])+""" days, for both open-status exoplanets and known transiters. Dates are JD-2450000.0, Depth is in percent, both Period and Transit Window are in days, and UT is in hours. Units are given at the top of each column.  Priority open targets are denoted with an asterisk (*). For more details on the ephemerides, click <a href="http://physics.sfsu.edu/~skane/private/terms/ephemerides.html">here</a>. Responses to this email will be delivered to Natalie Hinkel and Stephen Kane.<br><br>    </p>    </body>    </html>    """#------------------------------------------------------------------------------------# Here we set up the tables to be outputted in the email, one for open-status# planets and the other for transits - for html-based email clients only. Special attention# was paid to maintain the width of the columns in the tables.#colhtml = ("<html>Name &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Period &nbsp;Depth &nbsp;  Win &nbsp; Midpoint &nbsp;&nbsp; UT  &nbsp;&nbsp;&nbsp;&nbsp; RA   &nbsp;&nbsp;&nbsp;&nbsp;  Dec   &nbsp;&nbsp;&nbsp;&nbsp;  V<br></html>")colunit = ("<html> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(d) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(%) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (d) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (JD) &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;  (h)  &nbsp;&nbsp;&nbsp; (hms)  &nbsp; (deg) &nbsp;(mag)<br></html>")pltableOhtml = ''for ii in range(len(neartargs)):    if not neartargs['STATUS'][ii]=='closed' and not neartargs['STATUS'][ii]=='transit':        for jj in range(len(org)):   #find the exoplanets.org name that matches to the fortran name            name = org.NAME[jj].replace(' ','')  #remove white spaces from name            letter = name[-1]   #keep the planet letter            name = name[:-1]            name = name+(9-len(name))*'_'+letter            if len(name) > 10:  # catch the special cases                if name[:3]=='ups': name = name[:3]+name[7:10]+'___'+letter                if name[:3]=='eps': name = name[:3]+name[7:10]+'___'+letter                if name[:3]=='NGC': name = name[:7]+'__'+letter                if name[:3]=='OGL' and len(name)==12: name = name[:4]+name[5:7]+name[8:]                if name[:3]=='OGL' and len(name)==11: name = name[:4]+name[5:]            if neartargs['NAME'][ii]==name:                hyper=str(org.NAME[jj].replace(' ','_'))    #for the hyperlink            if neartargs['NAME'][ii] in good.Planet:                vmag = neartargs['VMAG'][ii][:-2]+"*"            else:                vmag = neartargs['VMAG'][ii][:-2]                temp = ("<html><tt>%s &nbsp;&nbsp; %s &nbsp;&nbsp; %.2f &nbsp;&nbsp; %s &nbsp;&nbsp; %.2f &nbsp;&nbsp; %s &nbsp;&nbsp; %s &nbsp; %s &nbsp; %s  <br></html>" % ("<html><a href=\"http://www.exoplanets.org/detail/"+hyper+"\">"+neartargs['NAME'][ii]+"</a></tt></html>\n",('%s' % str('%.2f' % neartargs['PERIOD'][ii]))[:5],neartargs['DEPTH'][ii],str(neartargs['TW'][ii])[:3],neartargs['TMID'][ii]-2450000.0,('%s' % float('%.3g' % (jd2gd(neartargs['TMID'][ii]).hour+jd2gd(neartargs['TMID'][ii]).minute/60.)))[:4].zfill(4),('%s' % str('%004.2f' % (neartargs['R1'][ii]+neartargs['R2'][ii]/60.))).zfill(5), str('%+005.3f' % (neartargs['D1'][ii]+neartargs['D2'][ii]/60.))[:5],vmag))        pltableOhtml = pltableOhtml+temppltableOhtml = "<html>Open Status <br><br></html>"+colhtml+colunit+pltableOhtmlpltableThtml = ''for ii in range(len(neartargs)):    if not neartargs['STATUS'][ii]=='closed' and not neartargs['STATUS'][ii]=='open':        for jj in range(len(org)):   #find the exoplanets.org name that matches to the fortran name            name = org.NAME[jj].replace(' ','')  #remove white spaces from name            letter = name[-1]   #keep the planet letter            name = name[:-1]            name = name+(9-len(name))*'_'+letter            if len(name) > 10:  # catch the special cases                if name[:3]=='ups': name = name[:3]+name[7:10]+'___'+letter                if name[:3]=='eps': name = name[:3]+name[7:10]+'___'+letter                if name[:3]=='NGC': name = name[:7]+'__'+letter                if name[:3]=='OGL' and len(name)==12: name = name[:4]+name[5:7]+name[8:]                if name[:3]=='OGL' and len(name)==11: name = name[:4]+name[5:]            if neartargs['NAME'][ii]==name:                hyper=str(org.NAME[jj].replace(' ','_'))    #for the hyperlink        temp = ("<html><tt>%s &nbsp;&nbsp; %s &nbsp;&nbsp; %.2f &nbsp;&nbsp; %s &nbsp;&nbsp; %.2f &nbsp;&nbsp; %s &nbsp;&nbsp; %s &nbsp; %s &nbsp; %s  <br></html>" % ("<html><a href=\"http://www.exoplanets.org/detail/"+hyper+"\">"+neartargs['NAME'][ii]+"</a></tt></html>\n",('%s' % str('%.2f' % neartargs['PERIOD'][ii]))[:5],neartargs['DEPTH'][ii],str(neartargs['TW'][ii])[:3],neartargs['TMID'][ii]-2450000.0,('%s' % float('%.3g' % (jd2gd(neartargs['TMID'][ii]).hour+jd2gd(neartargs['TMID'][ii]).minute/60.)))[:4].zfill(4),('%s' % str('%004.2f' % (neartargs['R1'][ii]+neartargs['R2'][ii]/60.))).zfill(5), str('%+005.3f' % (neartargs['D1'][ii]+neartargs['D2'][ii]/60.))[:5],neartargs['VMAG'][ii][:-2]))        pltableThtml = pltableThtml+tempif not len(pltableThtml)==0: pltableThtml = "<html>Transiting <br><br></html>"+colhtml+colunit+pltableThtml#------------------------------------------------------------------------------------# Finally, attach the html to the email and send it out, with the sent# address being from the terms.update gmail account.#part2 = MIMEText(bodyhtml+pltableOhtml+"<br><br><br>"+pltableThtml, 'html')msg.attach(part2)TO = sys.argv[2:]FROM = "natalie.hinkel@gmail.com"session = smtplib.SMTP('smtp.gmail.com', 587)session.ehlo()session.starttls()session.login('terms.update@gmail.com', '2Ephem**')session.sendmail(FROM, TO, msg.as_string())session.quit()